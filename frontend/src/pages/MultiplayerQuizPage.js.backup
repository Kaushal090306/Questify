import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { api } from '../api/axiosConfig';
import socketIOService from '../services/socketService';

const MultiplayerQuizPage = () => {
  const { roomId, roomCode } = useParams();
  const navigate = useNavigate();
  const location = useLocation();
  const { user } = useAuth();
  
  // Use roomCode if available, otherwise use roomId (for backward compatibility)
  const currentRoomCode = roomCode || roomId;
  
  // Get display name from navigation state or use user info
  const displayName = location.state?.displayName || user?.username || user?.email || `User${user?.id}`;
  
  // State management
  const [room, setRoom] = useState(location.state?.room || null);
  const [currentQuestion, setCurrentQuestion] = useState(null);
  const [questionIndex, setQuestionIndex] = useState(0);
  const [totalQuestions, setTotalQuestions] = useState(0);
  const [participants, setParticipants] = useState([]);
  const [timeRemaining, setTimeRemaining] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [hasAnswered, setHasAnswered] = useState(false);
  const [gameState, setGameState] = useState('waiting'); // waiting, active, leaderboard, completed
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isConnected, setIsConnected] = useState(false);
  const [leaderboard, setLeaderboard] = useState([]);
  const [showLeaderboard, setShowLeaderboard] = useState(false);
  const [isCurrentUserHost, setIsCurrentUserHost] = useState(false);

  // Socket.io connection and event handling
  useEffect(() => {
    const connectToQuiz = async () => {
      try {
        // Validate user data before connecting
        if (!user || !user.id) {
          console.log('User not available yet, waiting...');
          return;
        }

        console.log('Connecting to quiz with:', { currentRoomCode, userId: user.id, displayName });

        if (!currentRoomCode) {
          console.error('Room code is missing!');
          setError('Room code is missing from URL');
          return;
        }

        socketIOService.connect();
        
        // Join the room
        await socketIOService.joinRoom(
          currentRoomCode, 
          user.id.toString(), 
          displayName
        );
        setIsConnected(true);

        // Listen for quiz events
        socketIOService.on('init', (data) => {
          console.log('Received init event:', data);
          setGameState(data.state.type);
          if (data.state.problem) {
            setCurrentQuestion(data.state.problem);
            setQuestionIndex(data.state.current_index || 0);
            setTotalQuestions(data.state.total_problems || 0);
            const timeLeft = Math.ceil((data.state.problem.start_time + data.state.problem.timer_duration - Date.now()) / 1000);
            setTimeRemaining(Math.max(0, timeLeft));
          }
          if (data.state.leaderboard) {
            setLeaderboard(data.state.leaderboard);
          }
          setParticipants(data.users);
          
          // Check if current user is host
          const currentUserData = data.users.find(u => u.id === user.id.toString());
          if (currentUserData) {
            setIsCurrentUserHost(currentUserData.is_host || false);
            console.log('User host status:', currentUserData.is_host);
          }
        });

        socketIOService.on('quiz_started', (data) => {
          console.log('Received quiz_started event:', data);
          setGameState('active');
        });

        socketIOService.on('problem', (data) => {
          console.log('Received problem event:', data);
          setCurrentQuestion(data.problem);
          setQuestionIndex(data.current_index);
          setTotalQuestions(data.total_problems);
          setTimeRemaining(Math.ceil(data.problem.timer_duration));
          setHasAnswered(false);
          setSelectedAnswer(null);
          setGameState('active');
        });

        socketIOService.on('leaderboard', (data) => {
          console.log('Leaderboard received:', data);
          setLeaderboard(data.leaderboard);
          setGameState('leaderboard');
          setShowLeaderboard(true);
          // Auto-hide leaderboard after 5 seconds for participants, but keep it visible for host
          const currentIsHost = isCurrentUserHost || (room && user && room.creator === user.id);
          if (!currentIsHost) {
            setTimeout(() => {
              setShowLeaderboard(false);
            }, 5000);
          }
        });

        socketIOService.on('quiz_ended', (data) => {
          setLeaderboard(data.final_leaderboard);
          setGameState('completed');
        });

        socketIOService.on('user_joined', (data) => {
          console.log('User joined:', data);
          if (data.all_users) {
            setParticipants(data.all_users);
          } else {
            setParticipants(prev => {
              const exists = prev.find(p => p.id === data.user.id);
              if (!exists) {
                return [...prev, data.user];
              }
              return prev;
            });
          }
        });

        socketIOService.on('user_left', (data) => {
          setParticipants(prev => prev.filter(p => p.id !== data.user_id));
        });

        socketIOService.on('answer_submitted', (data) => {
          console.log('Answer submitted:', data);
        });

        socketIOService.on('user_answered', (data) => {
          setParticipants(prev => prev.map(p => 
            p.id === data.user_id ? { ...p, hasAnswered: true } : p
          ));
        });

        socketIOService.on('score_update', (data) => {
          setParticipants(prev => prev.map(p => 
            p.id === data.user_id ? { ...p, points: data.points } : p
          ));
        });

      } catch (error) {
        console.error('Socket connection error:', error);
        setError('Failed to connect to quiz room');
      }
    };

    if (user && user.id) {
      connectToQuiz();
    }

    return () => {
      if (socketIOService.socket) {
        socketIOService.off('init');
        socketIOService.off('quiz_started');
        socketIOService.off('problem');
        socketIOService.off('leaderboard');
        socketIOService.off('quiz_ended');
        socketIOService.off('user_joined');
        socketIOService.off('user_left');
        socketIOService.off('answer_submitted');
        socketIOService.off('user_answered');
        socketIOService.off('score_update');
      }
    };
  }, [currentRoomCode, user, isConnected]);

  // Timer countdown
  useEffect(() => {
    if (timeRemaining > 0 && gameState === 'active') {
      const timer = setTimeout(() => {
        setTimeRemaining(timeRemaining - 1);
      }, 1000);
      return () => clearTimeout(timer);
    } else if (timeRemaining === 0 && gameState === 'active' && currentQuestion && !hasAnswered) {
      // Auto-submit when time runs out
      handleSubmitAnswer(null);
    }
  }, [timeRemaining, gameState, currentQuestion, hasAnswered]);

  // Fetch initial room data (only if not already available from navigation state)
  useEffect(() => {
    const fetchRoomData = async () => {
      // Skip fetch if room data is already available from navigation state
      if (room) {
        console.log('Room data already available from navigation state:', room);
        setLoading(false);
        return;
      }

      // Add validation for currentRoomCode
      if (!currentRoomCode || typeof currentRoomCode !== 'string' || currentRoomCode.trim() === '') {
        console.error('Invalid room code:', currentRoomCode);
        setError('Invalid room code provided.');
        setLoading(false);
        return;
      }

      console.log('Fetching room data for room code:', currentRoomCode);
      
      try {
        const response = await api.get(`/rooms/${currentRoomCode}/`);
        console.log('Room data fetched successfully:', response.data);
        setRoom(response.data);
        setLoading(false);
      } catch (error) {
        console.error('Error fetching room data:', error);
        console.error('Error details:', {
          status: error.response?.status,
          statusText: error.response?.statusText,
          data: error.response?.data,
          url: error.config?.url
        });
        setError(`Failed to load room data: ${error.response?.status || 'Network error'}`);
        setLoading(false);
      }
    };

    if (currentRoomCode) {
      fetchRoomData();
    } else {
      console.warn('No room code available, skipping fetch');
      setLoading(false);
    }
  }, [currentRoomCode, room]);

  // Handle next question (host only)
  const handleNextQuestion = async () => {
    if (!room || !user) return;
    
    try {
      await socketIOService.nextQuestion(currentRoomCode, user.id.toString());
    } catch (err) {
      console.error('Failed to advance to next question:', err);
    }
  };

  // Check if current user is host (prioritize socket data, fallback to room data)
  const isHost = isCurrentUserHost || (room && user && room.creator === user.id);

  // Handle answer selection
  const handleAnswerSelect = (answerIndex) => {
    if (!hasAnswered && gameState === 'active') {
      setSelectedAnswer(answerIndex);
    }
  };

  // Handle answer submission
  const handleSubmitAnswer = async (answerIndex = selectedAnswer) => {
    if (hasAnswered) return;
    
    try {
      await socketIOService.submitAnswer(currentRoomCode, user.id.toString(), answerIndex);
      setHasAnswered(true);
    } catch (err) {
      console.error('Failed to submit answer:', err);
    }
  };

  // Handle quiz start (host only)
  const handleStartQuiz = async () => {
    if (!isHost) return;
    
    try {
      console.log('Starting quiz for room:', currentRoomCode);
      await socketIOService.startQuiz(currentRoomCode, user.id.toString());
      console.log('Quiz start request sent successfully');
    } catch (err) {
      console.error('Failed to start quiz:', err);
      alert('Failed to start quiz. Please try again.');
    }
  };

  // Format time display
  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading quiz...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
          <button
            onClick={() => navigate('/dashboard')}
            className="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700"
          >
            Back to Dashboard
          </button>
        </div>
      </div>
    );
  }

  // Waiting state
  if (gameState === 'waiting') {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-pulse text-6xl mb-4">⏳</div>
          <h2 className="text-2xl font-bold text-gray-800 mb-2">Waiting for Quiz to Start</h2>
          <p className="text-gray-600 mb-4">
            {isHost ? 'Click "Start Quiz" when ready!' : 'The host will start the quiz shortly...'}
          </p>
          <div className="bg-white rounded-lg shadow-md p-4 inline-block mb-4">
            <p className="text-sm text-gray-500 mb-2">Connection Status:</p>
            <div className={`text-sm font-medium ${isConnected ? 'text-green-600' : 'text-yellow-600'}`}>
              {isConnected ? '🟢 Connected' : '🟡 Connecting...'}
            </div>
          </div>
          
          {/* Show participants count */}
          {participants && participants.length > 0 && (
            <div className="bg-white rounded-lg shadow-md p-4 mb-4 inline-block">
              <p className="text-sm text-gray-500 mb-2">Participants ({participants.length}):</p>
              <div className="text-sm">
                {participants.map((participant, index) => (
                  <div key={participant.id} className="flex items-center justify-center mb-1">
                    <span className="font-medium">{participant.name}</span>
                    {participant.is_host && <span className="ml-2 text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">Host</span>}
                  </div>
                ))}
              </div>
            </div>
          )}
          
          {/* Navigation and action buttons */}
          <div className="mt-4">
            {isHost && (
              <button
                onClick={handleStartQuiz}
                className="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 mr-2 font-semibold"
              >
                🚀 Start Quiz
              </button>
            )}
            <button
              onClick={() => navigate('/dashboard')}
              className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700"
            >
              Back to Dashboard
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Active question state
  if (gameState === 'active' && currentQuestion) {
    // Host View - Analytics Dashboard
    if (isHost) {
      return (
        <div className="min-h-screen bg-gray-50 py-8">
          <div className="max-w-7xl mx-auto px-4">
            {/* Header */}
            <div className="bg-white rounded-lg shadow-md p-6 mb-6">
              <div className="flex justify-between items-center">
                <div>
                  <h1 className="text-2xl font-bold text-gray-800">
                    Host Dashboard - Question {questionIndex + 1} of {totalQuestions}
                  </h1>
                  <p className="text-gray-600">{room?.title}</p>
                </div>
                <div className="text-right">
                  <div className={`text-3xl font-bold ${timeRemaining <= 10 ? 'text-red-600' : 'text-indigo-600'}`}>
                    {formatTime(timeRemaining)}
                  </div>
                  <p className="text-sm text-gray-500">Time Remaining</p>
                </div>
              </div>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Question Panel */}
              <div className="bg-white rounded-lg shadow-md p-6">
                <h2 className="text-xl font-bold text-gray-800 mb-4">Current Question</h2>
                <div className="bg-gray-50 rounded-lg p-4 mb-4">
                  <p className="text-lg font-medium text-gray-800 mb-4">{currentQuestion.question_text}</p>
                  
                  <div className="space-y-2">
                    {currentQuestion.options.map((option, index) => (
                      <div
                        key={index}
                        className={`p-3 rounded-lg border ${
                          currentQuestion.correct_answer === index
                            ? 'bg-green-100 border-green-300 text-green-800 ring-2 ring-green-500'
                            : 'bg-white border-gray-200'
                        }`}
                      >
                        <div className="flex items-center justify-between">
                          <span className="font-medium">
                            {String.fromCharCode(65 + index)}. {option.title || option}
                          </span>
                          {currentQuestion.correct_answer === index && (
                            <span className="flex items-center text-green-600">
                              <span className="text-sm font-bold mr-1">✓ CORRECT</span>
                            </span>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
                
                <div className="text-sm text-gray-600">
                  <p><strong>Type:</strong> {currentQuestion.type}</p>
                  <p><strong>Points:</strong> {currentQuestion.points}</p>
                  <p><strong>Timer:</strong> {Math.ceil(currentQuestion.timer_duration / 1000)}s</p>
                </div>
              </div>

              {/* Participants Analytics */}
              <div className="bg-white rounded-lg shadow-md p-6">
                <h2 className="text-xl font-bold text-gray-800 mb-4">Participant Activity</h2>
                <div className="space-y-3">
                  {participants
                    .filter(participant => participant.id !== user?.id && participant.user_id !== user?.id)
                    .map((participant) => (
                    <div
                      key={participant.id}
                      className="flex items-center justify-between p-3 bg-gray-50 rounded-lg"
                    >
                      <div className="flex items-center">
                        <div className="w-10 h-10 bg-indigo-100 rounded-full flex items-center justify-center">
                          <span className="text-indigo-600 font-bold">
                            {participant.display_name ? participant.display_name.charAt(0).toUpperCase() : 
                             participant.name ? participant.name.charAt(0).toUpperCase() : 'U'}
                          </span>
                        </div>
                        <div className="ml-3">
                          <p className="font-medium text-gray-800">
                            {participant.display_name || participant.name || 'Unknown Participant'}
                          </p>
                          <p className="text-sm text-gray-500">
                            {participant.hasAnswered ? '✅ Answered' : '⏱️ Thinking...'}
                          </p>
                        </div>
                      </div>
                      <div className="text-right">
                        <span className="text-lg font-bold text-indigo-600">{participant.points || 0} pts</span>
                        <p className="text-xs text-gray-500">Total Score</p>
                      </div>
                    </div>
                  ))}
                </div>
                
                {/* Answer Statistics */}
                <div className="mt-6 pt-4 border-t border-gray-200">
                  <h3 className="font-bold text-gray-800 mb-2">Answer Distribution</h3>
                  <div className="text-sm text-gray-600">
                    <p>Answered: {participants.filter(p => p.hasAnswered).length} / {participants.length}</p>
                    <p>Response Rate: {participants.length > 0 ? Math.round((participants.filter(p => p.hasAnswered).length / participants.length) * 100) : 0}%</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Host Controls */}
            <div className="bg-white rounded-lg shadow-md p-6 mt-6">
              <div className="flex justify-between items-center">
                <div>
                  <h3 className="text-lg font-bold text-gray-800">Host Controls</h3>
                  <p className="text-gray-600">Manage the quiz flow</p>
                </div>
                <div className="space-x-4">
                  {timeRemaining === 0 && (
                    <button
                      onClick={handleNextQuestion}
                      className="px-6 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors"
                    >
                      Next Question →
                    </button>
                  )}
                </div>
              </div>
            </div>

            {/* Leaderboard Display for Host */}
            {showLeaderboard && leaderboard && leaderboard.length > 0 && (
              <div className="bg-white rounded-lg shadow-md p-6 mt-6">
                <h3 className="text-xl font-bold text-gray-800 mb-4">🏆 Question Leaderboard</h3>
                <div className="space-y-3">
                  {leaderboard.map((player, index) => (
                    <div
                      key={player.id}
                      className={`flex items-center justify-between p-4 rounded-lg ${
                        index === 0 ? 'bg-yellow-50 border-2 border-yellow-200' :
                        index === 1 ? 'bg-gray-50 border-2 border-gray-200' :
                        index === 2 ? 'bg-orange-50 border-2 border-orange-200' :
                        'bg-white border border-gray-200'
                      }`}
                    >
                      <div className="flex items-center">
                        <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white font-bold mr-3 ${
                          index === 0 ? 'bg-yellow-500' :
                          index === 1 ? 'bg-gray-500' :
                          index === 2 ? 'bg-orange-500' :
                          'bg-indigo-500'
                        }`}>
                          {index + 1}
                        </div>
                        <div>
                          <p className="font-semibold text-gray-800">
                            {player.display_name || player.name || 'Unknown Player'}
                          </p>
                          <p className="text-sm text-gray-500">
                            Current Score: {player.total_score || 0} pts
                          </p>
                        </div>
                      </div>
                      <div className="text-right">
                        <span className={`text-lg font-bold ${
                          index === 0 ? 'text-yellow-600' :
                          index === 1 ? 'text-gray-600' :
                          index === 2 ? 'text-orange-600' :
                          'text-indigo-600'
                        }`}>
                          +{player.question_score || 0}
                        </span>
                        <p className="text-xs text-gray-500">This Question</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      );
    }

    // Participant View - Question Only
    return (
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-4xl mx-auto px-4">
          {/* Header */}
          <div className="bg-white rounded-lg shadow-md p-6 mb-6">
            <div className="flex justify-between items-center">
              <div>
                <h1 className="text-2xl font-bold text-gray-800">
                  Question {questionIndex + 1} of {totalQuestions}
                </h1>
                <p className="text-gray-600">{room?.title}</p>
              </div>
              <div className="text-right">
                <div className={`text-3xl font-bold ${timeRemaining <= 10 ? 'text-red-600' : 'text-indigo-600'}`}>
                  {formatTime(timeRemaining)}
                </div>
                <p className="text-sm text-gray-500">Time Remaining</p>
              </div>
            </div>
          </div>

          {/* Question */}
          <div className="bg-white rounded-lg shadow-md p-6 mb-6">
            <h2 className="text-xl font-bold text-gray-800 mb-6">{currentQuestion.question_text}</h2>
            
            <div className="space-y-3">
              {currentQuestion.options.map((option, index) => (
                <button
                  key={index}
                  onClick={() => handleAnswerSelect(index)}
                  disabled={hasAnswered}
                  className={`w-full p-4 text-left rounded-lg border transition-all ${
                    selectedAnswer === index
                      ? 'bg-indigo-100 border-indigo-300 text-indigo-800'
                      : hasAnswered
                        ? 'bg-gray-100 border-gray-200 text-gray-500 cursor-not-allowed'
                        : 'bg-white border-gray-200 hover:bg-gray-50 hover:border-gray-300'
                  }`}
                >
                  <div className="flex items-center">
                    <div className={`w-8 h-8 rounded-full border-2 flex items-center justify-center mr-3 ${
                      selectedAnswer === index
                        ? 'border-indigo-500 bg-indigo-500 text-white'
                        : 'border-gray-300'
                    }`}>
                      {String.fromCharCode(65 + index)}
                    </div>
                    <span className="font-medium">{option.title || option}</span>
                  </div>
                </button>
              ))}
            </div>

            {/* Submit Button */}
            {selectedAnswer !== null && !hasAnswered && (
              <div className="mt-6 text-center">
                <button
                  onClick={() => handleSubmitAnswer()}
                  className="px-8 py-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors font-medium"
                >
                  Submit Answer
                </button>
              </div>
            )}

            {hasAnswered && (
              <div className="mt-6 text-center">
                <div className="bg-green-100 border border-green-200 text-green-800 px-4 py-2 rounded-lg inline-block">
                  ✅ Answer submitted! Waiting for other participants...
                </div>
              </div>
            )}
          </div>

          {/* Progress */}
          <div className="bg-white rounded-lg shadow-md p-4">
            <div className="flex justify-between items-center mb-2">
              <span className="text-sm font-medium text-gray-600">Progress</span>
              <span className="text-sm text-gray-500">{questionIndex + 1} / {totalQuestions}</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div
                className="bg-indigo-600 h-2 rounded-full transition-all duration-300"
                style={{ width: `${((questionIndex + 1) / totalQuestions) * 100}%` }}
              ></div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Leaderboard state
  if (gameState === 'leaderboard') {
    return (
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-4xl mx-auto px-4">
          <div className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-2xl font-bold text-gray-800 mb-6 text-center">Leaderboard</h2>
            
            <div className="space-y-3">
              {leaderboard.map((player, index) => (
                <div
                  key={player.user_id}
                  className={`flex items-center justify-between p-4 rounded-lg ${
                    index < 3 ? 'bg-yellow-50 border border-yellow-200' : 'bg-gray-50'
                  }`}
                >
                  <div className="flex items-center">
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white font-bold ${
                      index === 0 ? 'bg-yellow-500' : index === 1 ? 'bg-gray-400' : index === 2 ? 'bg-orange-400' : 'bg-gray-600'
                    }`}>
                      {player.rank}
                    </div>
                    <span className="ml-3 font-medium">{player.name}</span>
                  </div>
                  <span className="text-lg font-bold text-indigo-600">{player.points} pts</span>
                </div>
              ))}
            </div>

            <div className="text-center mt-6">
              <p className="text-gray-500">Next question starting soon...</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Completed state
  if (gameState === 'completed') {
    return (
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-4xl mx-auto px-4">
          <div className="bg-white rounded-lg shadow-md p-6 text-center">
            <div className="text-6xl mb-4">🎉</div>
            <h2 className="text-3xl font-bold text-gray-800 mb-6">Quiz Complete!</h2>
            
            <div className="bg-gray-50 rounded-lg p-6 mb-6">
              <h3 className="text-xl font-bold text-gray-800 mb-4">Final Results</h3>
              <div className="space-y-3">
                {leaderboard.map((player, index) => (
                  <div
                    key={player.user_id}
                    className={`flex items-center justify-between p-4 rounded-lg ${
                      index < 3 ? 'bg-yellow-50 border border-yellow-200' : 'bg-white'
                    }`}
                  >
                    <div className="flex items-center">
                      <div className={`w-10 h-10 rounded-full flex items-center justify-center text-white font-bold ${
                        index === 0 ? 'bg-yellow-500' : index === 1 ? 'bg-gray-400' : index === 2 ? 'bg-orange-400' : 'bg-gray-600'
                      }`}>
                        {player.rank}
                      </div>
                      <span className="ml-3 font-medium text-lg">{player.name}</span>
                    </div>
                    <span className="text-xl font-bold text-indigo-600">{player.points} pts</span>
                  </div>
                ))}
              </div>
            </div>

            <button
              onClick={() => navigate('/dashboard')}
              className="px-6 py-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors"
            >
              Back to Dashboard
            </button>
          </div>
        </div>
      </div>
    );
  }

  return null;
};

export default MultiplayerQuizPage;
